syscall.c:200:static int syscall_brk(void *end_data_segment)
fscalls.c:153:int syscall_chdir(const char *path)
filedesc.c:96:int syscall_close(int fd)
filedesc.c:119:int syscall_dup2(int oldfd, int newfd)
syscall.c:24:int syscall_execve(const char *filename, char *const argv[],
unixproc.c:180:syscall_execve(const char *filename, char *const argv[],
syscall.c:126:static int syscall_exit(int status)
unixproc.c:75:pid_t syscall_fork(regs * r)
fscalls.c:170:char *syscall_getcwd(char *buf, size_t size)
fscalls.c:127:int syscall_getdent(int fd, struct dirent *entry)
syscall.c:185:static pid_t syscall_geterrno(void)
syscall.c:114:static pid_t syscall_getpid()
syscall.c:225:int syscall_kill(pid_t pid)
fscalls.c:89:int syscall_open(const char *pathname, int flags)
pipe.c:309:int syscall_pipe(int filedes[2])
syscall.c:162:static ssize_t syscall_read(int fd, void *buf, size_t count)
syscall.c:295:int syscall_receive(message * msg, int block)
syscall.c:248:int syscall_send(pid_t to, unsigned int tag, const void *data, size_t size)
fscalls.c:20:int syscall_stat(const char *path, struct stat *buf)
unixproc.c:319:pid_t syscall_waitpid(pid_t pid, int *status, int options)
syscall.c:143:static ssize_t syscall_write(int fd, const void *buf, size_t count)
